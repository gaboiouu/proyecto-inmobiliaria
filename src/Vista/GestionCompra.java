/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Vista;

import Controlador.CompraControlador;
import Controlador.PagoControlador;
import Dao.ClienteDAO;
import Dao.InmuebleDAO;
import PatronSingleton.DatabaseConnection;
import PatronesObserver.Observer;
import java.awt.GridLayout;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ander
 */
public class GestionCompra extends javax.swing.JPanel  implements Observer {
    
    private CompraControlador cmensaje;
    private PagoControlador pmensaje;

     /**
     * Creates new form Registra_Compra
     */
    public GestionCompra() {
        initComponents();
        this.cmensaje = new CompraControlador();
        this.cmensaje.agregarObservador(this);
        this.pmensaje = new PagoControlador();
        this.pmensaje.agregarObservador(this);
        configurarTabla();
        cargarClientes();
        cargarInmuebles();
        agregarComboInmuebles();
        cargarDatos("");
    }
    
    @Override
    public void actualizar(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje);
        cargarDatos("");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        combocliente = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        comboinmuebles = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        montocompra = new javax.swing.JTextField();
        bregistrar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        date = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        bpagos = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        buscarcompra = new javax.swing.JTextField();
        buscar = new javax.swing.JButton();
        batras = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablacompras = new javax.swing.JTable();
        beditar = new javax.swing.JButton();
        bdetalle = new javax.swing.JButton();
        bactualizar = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 0, 102));
        setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/nuevo-producto.png"))); // NOI18N
        jLabel1.setText("Registrar Compra:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Cliente:");

        combocliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboclienteActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Inmueble:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Monto de la Compra:");

        montocompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                montocompraActionPerformed(evt);
            }
        });

        bregistrar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        bregistrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/carrito_1.png"))); // NOI18N
        bregistrar.setText("Registrar  Compra");
        bregistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bregistrarActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Fecha");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Compras"));

        jLabel6.setText("Historial de Compras:");

        bpagos.setBackground(new java.awt.Color(0, 102, 153));
        bpagos.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bpagos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/historial1.png"))); // NOI18N
        bpagos.setText("Historial de Pagos");
        bpagos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bpagosActionPerformed(evt);
            }
        });

        jLabel7.setText("Buscar Compra:");

        buscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/buscar.png"))); // NOI18N
        buscar.setText("Buscar");
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });

        batras.setBackground(new java.awt.Color(0, 102, 153));
        batras.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        batras.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/volver.png"))); // NOI18N
        batras.setText("Atras");
        batras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batrasActionPerformed(evt);
            }
        });

        tablacompras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tablacompras);

        beditar.setBackground(new java.awt.Color(0, 102, 153));
        beditar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        beditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/editar.png"))); // NOI18N
        beditar.setText("Editar");
        beditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beditarActionPerformed(evt);
            }
        });

        bdetalle.setBackground(new java.awt.Color(0, 102, 153));
        bdetalle.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        bdetalle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/expediente.png"))); // NOI18N
        bdetalle.setText("Ver Detalle Compra");
        bdetalle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bdetalleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(buscarcompra, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(buscar))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(bpagos, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(beditar, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(bdetalle)
                        .addGap(60, 60, 60)
                        .addComponent(batras, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 716, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(buscarcompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscar))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bpagos, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(beditar)
                    .addComponent(bdetalle)
                    .addComponent(batras))
                .addGap(21, 21, 21))
        );

        bactualizar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        bactualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/actualizar.png"))); // NOI18N
        bactualizar.setText("Actualizar");
        bactualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bactualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(combocliente, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(montocompra, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboinmuebles, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(83, 83, 83))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(259, 259, 259)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(bregistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addComponent(bactualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(combocliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(comboinmuebles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(montocompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bregistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bactualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    private void cargarClientes() {
        ClienteDAO clienteDAO = new ClienteDAO();
        List<String> nombresClientes = clienteDAO.obtenerNombresClientes();
        for (String nombre : nombresClientes) {
            combocliente.addItem(nombre);
        }
    }
    
    private void cargarInmuebles() {
        InmuebleDAO inmuebleDAO = new InmuebleDAO();
        List<String> descripcionesInmuebles = inmuebleDAO.obtenerDescripcionesInmuebles();
        for (String descripcion : descripcionesInmuebles) {
            comboinmuebles.addItem(descripcion);
        }
    }
    
    private void agregarComboInmuebles() {
        comboinmuebles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarMontoInmuebles();
            }
        });
    }
    
    private void agregarMontoInmuebles() {
        String descripcionSeleccionada = (String) comboinmuebles.getSelectedItem();
            if (descripcionSeleccionada != null) {
                InmuebleDAO inmuebleDAO = new InmuebleDAO();
                double precio = inmuebleDAO.obtenerPrecioPorDescripcion(descripcionSeleccionada);
                montocompra.setText(String.valueOf(precio));
            }
        }
    private Date convertirTextoAFecha(String text) {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        try {
            return formato.parse(text);
        } catch (ParseException e) {
            e.printStackTrace();
            return null;
        }
    }
    
        
    private void comboclienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboclienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboclienteActionPerformed

    private void bregistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bregistrarActionPerformed
        String nombreCliente = (String) combocliente.getSelectedItem();
        String descripcionInmueble = (String) comboinmuebles.getSelectedItem();
        double monto = Double.parseDouble(montocompra.getText());
        Date fecha = convertirTextoAFecha(date.getText());
        
        try {
            ClienteDAO clienteDAO = new ClienteDAO();
            int idCliente = clienteDAO.obtenerIdClientePorNombre(nombreCliente);

            CompraControlador compraControlador = new CompraControlador();
            int idCompra = compraControlador.insertarCompra(idCliente, fecha, nombreCliente, descripcionInmueble, monto);

            PagoControlador pagoControlador = new PagoControlador();
            pagoControlador.insertarPago(idCompra, monto, fecha);
           
        
            // Cambiar el estado del inmueble a "vendido"
            InmuebleDAO inmuebleDAO = new InmuebleDAO();
            boolean actualizado = inmuebleDAO.actualizarEstadoInmueble(descripcionInmueble, "Vendido");

            if (actualizado) {
                cmensaje.RegistraCompraYactualizaEstadoInmueble();
            } else {
                cmensaje.errorActualizarInmueble();
            }
            // Limpiar campos y mostrar mensaje de éxito
            limpiarDatos();
            cargarInmuebles(); // Recargar el combo de inmuebles disponibles

            // Actualizar el JTable
            cargarDatos("");
        } catch (RuntimeException e) {
            cmensaje.errorRegistrarCompra();
        }
    }//GEN-LAST:event_bregistrarActionPerformed

    private void bpagosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bpagosActionPerformed
        java.awt.Window window = javax.swing.SwingUtilities.getWindowAncestor(this);

        if (window instanceof javax.swing.JFrame) {
            pmensaje.entrarVista();
            // Cerrar el JFrame actual
            window.dispose();
        }

        // Crear y mostrar la ventana principal
        JFrame pagosFrame = new JFrame("Historial de Pagos");
        pagosFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);       
        pagosFrame.add(new HistorialPagos()); // Asegúrate de que Principal sea un JPanel
        pagosFrame.pack(); // Ajustar tamaño al contenido
        pagosFrame.setLocationRelativeTo(null); // Centrar la ventana
        pagosFrame.setVisible(true);
    }//GEN-LAST:event_bpagosActionPerformed

    private void batrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batrasActionPerformed
        java.awt.Window window = javax.swing.SwingUtilities.getWindowAncestor(this);

        if (window instanceof javax.swing.JFrame) {
            cmensaje.notificarSalida();
            // Cerrar el JFrame actual
            window.dispose();
        }

        Menu menu = new Menu();
        menu.setVisible(true);
    }//GEN-LAST:event_batrasActionPerformed

    
    private void montocompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_montocompraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_montocompraActionPerformed

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
        String searchText = buscarcompra.getText().trim();
        cargarDatos(searchText);
    }//GEN-LAST:event_buscarActionPerformed

    private void beditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beditarActionPerformed
        int selectedRow = tablacompras.getSelectedRow();

        if (selectedRow != -1) {
            String clienteSeleccionado = tablacompras.getValueAt(selectedRow, 3).toString();
            String inmuebleSeleccionado = tablacompras.getValueAt(selectedRow, 4).toString();
            String fechaSeleccionada = tablacompras.getValueAt(selectedRow, 2).toString();
            String montoSeleccionado = tablacompras.getValueAt(selectedRow, 5).toString();

            for (int i = 0; i < combocliente.getItemCount(); i++) {
                if (combocliente.getItemAt(i).toString().equals(clienteSeleccionado)) {
                    combocliente.setSelectedIndex(i);
                    break;
                }
            }
            boolean inmuebleFound = false;
            for (int i = 0; i < comboinmuebles.getItemCount(); i++) {
                if (comboinmuebles.getItemAt(i).toString().equals(inmuebleSeleccionado)) {
                    comboinmuebles.setSelectedIndex(i);
                    inmuebleFound = true;
                    break;
                }
            }
            // Si el inmueble no está en la lista, agregarlo y seleccionarlo
            if (!inmuebleFound) {
                comboinmuebles.addItem(inmuebleSeleccionado);
                comboinmuebles.setSelectedItem(inmuebleSeleccionado);
            }

            date.setText(fechaSeleccionada);
            montocompra.setText(montoSeleccionado);

            bactualizar.setEnabled(true);
        } else {
            cmensaje.editar();
        }
    }//GEN-LAST:event_beditarActionPerformed

    private void bactualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bactualizarActionPerformed
        int selectedRow = tablacompras.getSelectedRow();
        if (selectedRow != -1) {
            int idCompra = Integer.parseInt(tablacompras.getValueAt(selectedRow, 0).toString());
            int idCliente = Integer.parseInt(tablacompras.getValueAt(selectedRow, 1).toString());
            String nombreCliente = combocliente.getSelectedItem().toString();
            String descripcionInmueble = comboinmuebles.getSelectedItem().toString();
            String fechaCompra = date.getText();
            String montoCompra = montocompra.getText();

            if (fechaCompra.isEmpty()) {
                JOptionPane.showMessageDialog(this, "La fecha de compra no puede estar vacía.");
                return;
            }

            try {
                Connection conexion = DatabaseConnection.getConnection();
                String query = "UPDATE compra SET id_cliente = ?, nombre_cliente = ?, descripcion_inmueble = ?, fecha = ?, monto = ? WHERE id_compra = ?";
                PreparedStatement statement = conexion.prepareStatement(query);
                statement.setInt(1, idCliente);
                statement.setString(2, nombreCliente);
                statement.setString(3, descripcionInmueble);
                statement.setString(4, fechaCompra);
                statement.setString(5, montoCompra);
                statement.setInt(6, idCompra);
                int filasAfectadas = statement.executeUpdate();
                if (filasAfectadas > 0) {
                    tablacompras.setValueAt(nombreCliente, selectedRow, 3);
                    tablacompras.setValueAt(descripcionInmueble, selectedRow, 4);
                    tablacompras.setValueAt(fechaCompra, selectedRow, 2);
                    tablacompras.setValueAt(montoCompra, selectedRow, 5);
                    combocliente.setSelectedIndex(0);
                    comboinmuebles.setSelectedIndex(0);
                    date.setText("");
                    montocompra.setText("");
                    cmensaje.actualizarCompra();
                } else {
                    cmensaje.errorActualizarBD();
                }
                statement.close();
                conexion.close();
            } catch (SQLException ex) {
                cmensaje.errorActualizarInmueble();
                ex.printStackTrace();
            }
        } else {
            cmensaje.filaActualizar();
        }
    }//GEN-LAST:event_bactualizarActionPerformed

    private void bdetalleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bdetalleActionPerformed
        int selectedRow = tablacompras.getSelectedRow(); // Obtener la fila seleccionada

        if (selectedRow != -1) {
            // Extraer los datos de la fila seleccionada
            String idCompra = tablacompras.getValueAt(selectedRow, 0).toString();
            String nombreCliente = tablacompras.getValueAt(selectedRow, 3).toString();
            String descripcionInmueble = tablacompras.getValueAt(selectedRow, 4).toString();
            String fecha = tablacompras.getValueAt(selectedRow, 2).toString();
            String monto = tablacompras.getValueAt(selectedRow, 5).toString();

            // Crear un panel para mostrar los detalles
            JPanel detallePanel = new JPanel();
            detallePanel.setLayout(new GridLayout(5, 2, 10, 10)); // Filas, columnas, horizontal y vertical gap
            detallePanel.add(new JLabel("ID Compra:"));
            detallePanel.add(new JLabel(idCompra));
            detallePanel.add(new JLabel("Cliente:"));
            detallePanel.add(new JLabel(nombreCliente));
            detallePanel.add(new JLabel("Inmueble:"));
            detallePanel.add(new JLabel(descripcionInmueble));
            detallePanel.add(new JLabel("Fecha:"));
            detallePanel.add(new JLabel(fecha));
            detallePanel.add(new JLabel("Monto:"));
            detallePanel.add(new JLabel(monto));

            // Mostrar el panel en un cuadro de diálogo
            JOptionPane.showMessageDialog(this, detallePanel, "Detalle de la Compra", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione una fila para ver el detalle.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_bdetalleActionPerformed


    private void cargarDatos(String searchText) {
        DefaultTableModel model = (DefaultTableModel) tablacompras.getModel();
        model.setRowCount(0); // Borra datos existentes

        String query = "SELECT id_compra, id_cliente, fecha, nombre_cliente, descripcion_inmueble, monto FROM Compra";
        if (!searchText.isEmpty()) {
            query += " WHERE nombre_cliente LIKE ? OR descripcion_inmueble LIKE ? OR fecha LIKE ? ";
        }

        try (Connection connection = DatabaseConnection.getConnection();
             PreparedStatement stmt = connection.prepareStatement(query)) {

            if (!searchText.isEmpty()) {
                String searchPattern = "%" + searchText + "%";
                stmt.setString(1, searchPattern);
                stmt.setString(2, searchPattern);
                stmt.setString(3, searchPattern);
            }

            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Object[] row = {
                        rs.getString("id_compra"),
                        rs.getString("id_cliente"),
                        rs.getString("fecha"),
                        rs.getString("nombre_cliente"),
                        rs.getString("descripcion_inmueble"),
                        rs.getString("monto"),
                    };
                    model.addRow(row);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    public void limpiarDatos(){
        combocliente.setSelectedIndex(-1); 
        comboinmuebles.setSelectedIndex(-1); 
        montocompra.setText("");
        date.setText(""); 
    }
    
    private void configurarTabla() {
        DefaultTableModel modeloTabla = new DefaultTableModel(
            new Object[][]{}, 
            new String[]{"ID Compra", "ID Cliente", "Fecha", "Nombre", "Inmueble", "Monto"}
        ) {
            // Evitar edición de celdas directamente
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tablacompras.setModel(modeloTabla);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bactualizar;
    private javax.swing.JButton batras;
    private javax.swing.JButton bdetalle;
    private javax.swing.JButton beditar;
    private javax.swing.JButton bpagos;
    private javax.swing.JButton bregistrar;
    private javax.swing.JButton buscar;
    private javax.swing.JTextField buscarcompra;
    private javax.swing.JComboBox<String> combocliente;
    private javax.swing.JComboBox<String> comboinmuebles;
    private javax.swing.JTextField date;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField montocompra;
    private javax.swing.JTable tablacompras;
    // End of variables declaration//GEN-END:variables
}
